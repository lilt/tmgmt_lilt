<?php

/**
 * @file
 * A description of what your module does.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Url;
use Drupal\Core\Database\Database;
use Drupal\tmgmt\Entity\Job;
use Drupal\tmgmt_textmaster\TextmasterTranslatorUi;

/**
 * Implements hook_entity_operation().
 */
function tmgmt_textmaster_entity_operation(EntityInterface $entity) {

  /** @var Drupal\tmgmt\Entity\Job $entity */
  if ($entity->bundle() == 'tmgmt_job'
    && $entity->hasTranslator()
    && $entity->getTranslatorId() == 'textmaster'
  ) {
    $project_id = tmgmt_textmaster_get_project_by_job_id($entity->id());
    if (!$project_id) {
      return;
    }

    $operations['view_on_tm'] = [
      'url' => Url::fromUri(TextmasterTranslatorUi::TEXTMASTER_APPLICATION_URL . '/clients/projects/' . $project_id, [
        'attributes' => [
          'target' => '_blank',
        ],
      ]),
      'title' => t('View on TextMaster'),
      'weight' => 10,
    ];
    $mappings = $entity->getRemoteMappings();
    $job_remote_data = end($mappings);
    $auto_launch = $job_remote_data->remote_data->TemplateAutoLaunch;
    if ($entity->isState(Job::STATE_UNPROCESSED) && !$auto_launch) {
      $operations['launch'] = [
        'url' => Url::fromRoute('tmgmt_textmaster.launch', [
          'tm_job_id' => $entity->id(),
          'tm_project_id' => $project_id,
        ]),
        'title' => t('Launch'),
        'weight' => 10,
      ];
    }
    return $operations;
  }
  /** @var Drupal\tmgmt\Entity\JobItem $entity */
  if ($entity->bundle() == 'tmgmt_job_item') {
    // Get the mapping only for the last created Project.
    $mappings = $entity->getRemoteMappings();
    $remote_mapping = end($mappings);
    $module_name = $remote_mapping->remote_identifier_1->value;
    $document_id = $remote_mapping->remote_identifier_3->value;
    $project_id = $remote_mapping->remote_identifier_2->value;
    if (!$project_id || $module_name != 'tmgmt_textmaster') {
      return;
    }
    $operations['view_on_tm'] = [
      'url' => Url::fromUri(TextmasterTranslatorUi::TEXTMASTER_APPLICATION_URL . '/clients/projects/' . $project_id . '/documents/' . $document_id, [
        'attributes' => [
          'target' => '_blank',
        ],
      ]),
      'title' => t('View on TextMaster'),
      'weight' => 10,
    ];
    return $operations;
  }

}

/**
 * Get TextMaster project ID (last if more than 1) by translation job id.
 *
 * @param string $job_id
 *   The ID of translation job.
 *
 * @return string|false
 *   The TextMaster project ID or FALSE.
 */
function tmgmt_textmaster_get_project_by_job_id($job_id) {
  $db = Database::getConnection();
  $result = $db->select('tmgmt_remote', 'remote')
    ->fields('remote', ['remote_identifier_2'])
    ->condition('remote_identifier_1', 'tmgmt_textmaster', '=')
    ->condition('tjid', $job_id, '=')
    ->orderBy('trid', 'DESC')
    ->range(0, 1)
    ->execute()
    ->fetchAssoc();
  return (isset($result['remote_identifier_2'])) ? $result['remote_identifier_2'] : FALSE;
}

/**
 * Implements hook_views_data_alter().
 */
function tmgmt_textmaster_views_data_alter(array &$data) {

  $data['tmgmt_job']['tmgmt_textmaster_price'] = [
    'title' => t('Project Price'),
    'help' => 'Displays a TextMaster price of the job.',
    'real field' => 'settings',
    'field' => [
      'title' => t('Project Price'),
      'id' => 'tmgmt_textmaster_price',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_textmaster_form_tmgmt_job_abort_form_alter(&$form) {
  /** @var Drupal\tmgmt\Entity\Job $job */
  $job = \Drupal::routeMatch()->getParameter('tmgmt_job');
  if (empty($job) ||
    !$job->hasTranslator() ||
    $job->getTranslatorId() != 'textmaster'
  ) {
    return;
  }
  // Set new message to confirm Job abortion for TextMaster Jobs.
  $confirmation_message = t("This will send a request to TextMaster to abort the job. Please know that if the job has been started on TextMaster side, you wonâ€™t be paid back.");
  $form['description']['#markup'] = $confirmation_message->render();
}
