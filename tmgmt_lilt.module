<?php

/**
 * @file
 * Module file of the Lilt Translator module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Database\Database;
use Drupal\tmgmt\Entity\Job;
use Drupal\tmgmt\JobInterface;
use Drupal\tmgmt\JobItemInterface;
use Drupal\tmgmt_lilt\LiltTranslatorUi;
use Drupal\tmgmt_lilt\Plugin\tmgmt\Translator\LiltTranslator;

/**
 * Implements hook_entity_operation().
 */
function tmgmt_lilt_entity_operation(EntityInterface $entity) {

  // Add Job Ops:
  /** @var Drupal\tmgmt\Entity\Job $entity */
  if ($entity->bundle() == 'tmgmt_job' && $entity->hasTranslator() && $entity->getTranslatorId() == 'lilt') {

    $project_id = LiltTranslator::getJobProjectId($entity);
    if (!$project_id) {
      return;
    }

    $operations['lilt_view'] = [
      'url' => Url::fromUri(LiltTranslator::getLiltAppURL($entity->getTranslator()) . 'projects/details/' . $project_id, [
        'attributes' => [
          'target' => '_blank',
        ],
        'query' => [],
      ]),
      'title' => t('View on Lilt'),
      'weight' => 10,
    ];
    return $operations;
  }
  /** @var Drupal\tmgmt\Entity\JobItem $entity */

  // Add Job Item Ops:
  if ($entity->bundle() == 'tmgmt_job_item') {
    $remote = LiltTranslator::getJobItemMapping($entity);
    list('module_name' => $module_name, 'document_id' => $document_id, 'project_id' => $project_id) = $remote;
    if (!$project_id || $module_name != 'tmgmt_lilt') {
      return;
    }

    $operations['lilt_view'] = [
      'url' => Url::fromUri(LiltTranslator::getLiltAppURL($entity->getTranslator()) . 'projects/details/' . $project_id . '/edit-document/' . $document_id, [
        'attributes' => [
          'target' => '_blank',
        ],
        'query' => [],
      ]),
      'title' => t('View on Lilt'),
      'weight' => 10,
    ];
    return $operations;
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_lilt_form_tmgmt_job_abort_form_alter(&$form, $form_state) {
  /** @var Drupal\tmgmt\Entity\Job $job */
  $job = \Drupal::routeMatch()->getParameter('tmgmt_job');
  if (empty($job) || !$job->hasTranslator() || $job->getTranslatorId() != 'lilt') {
    return;
  }

  $confirmation_message = t("This will send a request to Lilt to abort the job.");
  $form['description']['#markup'] = $confirmation_message->render();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_lilt_form_tmgmt_job_delete_form_alter(&$form, $form_state) {
  /** @var Drupal\tmgmt\Entity\Job $job */
  $job = $form_state->getFormObject()->getEntity();

  if ($job->getState() == Job::STATE_UNPROCESSED) {
    return;
  }

  if (!$job->hasTranslator() || !$job->getTranslatorId() == 'lilt') {
    return;
  }

  $jobs_items = $job->getItems();
  if (!empty($jobs_items)) {
    $remote = LiltTranslator::getJobItemMapping(reset($jobs_items));
    $form['tmgmt_lilt_project_id'] = array(
      '#type' => 'hidden',
      '#value' => $remote['project_id'],
    );
    $form['actions']['submit']['#submit'][] = 'tmgmt_lilt_form_tmgmt_job_delete_form_delete_submit';
  }
}

/**
 * Handle job deletion confirmation by archiving project on Lilt.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function tmgmt_lilt_form_tmgmt_job_delete_form_delete_submit(array $form, FormStateInterface $form_state) {
  /** @var Drupal\tmgmt\Entity\Job $job */
  $job = $form_state->getFormObject()->getEntity();

  if ($project_id = $form_state->getValue('tmgmt_lilt_project_id')) {
    $translator = $job->getTranslatorPlugin();
    $translator->setTranslator($job->getTranslator());
    $translator->archiveLiltProject($project_id);
    $job->addMessage('Job deleted. Archived Lilt Project @project_id.', ['@project_id' => $project_id], 'debug');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_lilt_form_tmgmt_job_item_edit_form_alter(&$form, $form_state) {

  // Retrieve job item data:
  /** @var Drupal\tmgmt\Entity\JobItem $job_item */
  $job_item = $form_state->getFormObject()->getEntity();

  /** @var Drupal\tmgmt\Entity\Job $job */
  $job = $job_item->getJob();
  if (!$job->hasTranslator() || !$job->getTranslatorId() == 'lilt' || $job_item->bundle() != 'tmgmt_job_item') {
    return;
  }

  if (!$job_item->isState(JobItemInterface::STATE_REVIEW)) {
    return;
  }

  // Add submission handler to check for completed projects:
  $form['actions']['accept']['#submit'][] = 'tmgmt_lilt_form_tmgmt_job_item_edit_form_accept_submit';

  /** @var Drupal\tmgmt_lilt\LiltTranslator $plugin */
  $plugin = $job_item->getTranslatorPlugin();
  $plugin->setTranslator($job_item->getTranslator());
  $remote = LiltTranslator::getJobItemMapping($job_item);
  list('module_name' => $module_name, 'document_id' => $document_id, 'project_id' => $project_id) = $remote;
  /** @var array $lilt_doc */
  $lilt_doc = $plugin->getLiltDocument($document_id);
  if (empty($lilt_doc) || !array_key_exists('status', $lilt_doc)) {
    return;
  }

  // Warnings:
  if (!$form_state->isRebuilding()) {
    \Drupal::messenger()->addWarning(t('Please share any QA feedback with your services manager so the updates can be made in Lilt.'));

    if ($lilt_doc['status'] === 'inReview') {
      \Drupal::messenger()->addWarning(t('If content is not accepted within 7 days, it will be automatically validated by Lilt with no possible revision request.'));
    }
    elseif ($lilt_doc['status'] === 'inProgress') {
      \Drupal::messenger()->addWarning(t('Please note that Lilt Document for this job item is in status "incomplete" and you wont be able to accept the translation until Lilt author finishes his work.'));
    }
    elseif ($lilt_doc['status'] === 'done') {
      \Drupal::messenger()->addWarning(t('Please note that Lilt Document for this job item is already completed.'));
    }
  }
}

/**
 * Handle job item accept submissions to archive Lilt projects on TMGMT job completion.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function tmgmt_lilt_form_tmgmt_job_item_edit_form_accept_submit(array $form, FormStateInterface $form_state) {
  /** @var Drupal\tmgmt\Entity\JobItem $job_item */
  $job_item = $form_state->getFormObject()->getEntity();
  /** @var Drupal\tmgmt\Entity\Job $job */
  $job = $job_item->getJob();

  if (!$job->hasTranslator() || !$job->getTranslatorId() == 'lilt') {
    return;
  }

  if ($job->getState() == Job::STATE_FINISHED) {
    $remote = LiltTranslator::getJobItemMapping($job_item);

    $translator = $job->getTranslatorPlugin();
    $translator->setTranslator($job->getTranslator());
    $translator->archiveLiltProject($remote['project_id']);

    $job->addMessage('Job finished. Archived Lilt Project @project_id.', ['@project_id' => $remote['project_id']], 'debug');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tmgmt_lilt_form_views_exposed_form_alter(&$form, $form_state) {
  $view = $form_state->get('view');

  if (!empty($view) && $view->id() == 'tmgmt_job_overview') {
    \Drupal::messenger()->addWarning(t('NOTE: Drupal word count may differ from Lilt.'));
  }
}
